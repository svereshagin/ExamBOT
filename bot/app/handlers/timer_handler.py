import asyncio
from typing import List

from aiogram import Bot, Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from bot.app.logger.logger_file import logger
from bot.app.repositories.models import Student
from bot.app.services.Exam.timer import ExamTimerPreparations
from bot.app.text_for_handlers.timer_handler_text import (
    cmd_router_start_exam_text,
)

active_timers = {}
student_skip_event = {}
router = Router()


class TimerState(StatesGroup):
    waiting_for_exam = State()
    waiting_for_time = State()
    exam_in_progress = State()


def log_and_respond(message: Message, text: str):
    logger.info(f"Chat {message.chat.id}: {text}")
    return message.answer(text)


@router.callback_query(F.data.in_(['start_exam']))
async def command_start_timer(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞ (–ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ)"""
    await callback.answer()
    await callback.message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–π–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 90'):")
    await state.set_state(TimerState.waiting_for_time)



@router.message(F.text.in_(["–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", "/start_exam"]))
async def command_start_timer(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    await log_and_respond(message, cmd_router_start_exam_text)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–π–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 90'):")
    await state.set_state(TimerState.waiting_for_time)



@router.message(TimerState.waiting_for_time)
async def set_timer(message: Message, state: FSMContext, bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        args = message.text.split()
        if len(args) != 2 or not all(arg.isdigit() for arg in args):
            await message.answer(
                "üö´ –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 90')."
            )
            return

        arg, arg2 = map(int, args)
        res = ExamTimerPreparations(mode1=(arg, arg2))

        try:
            text, res_data = await res.resulted_timer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ resulted_timer: {str(e)}")
            await message.answer(
                "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return

        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–π–º–µ—Ä
        if chat_id in active_timers:
            active_timers[chat_id].cancel()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        task = asyncio.create_task(countdown_timer(chat_id, res_data, bot))
        active_timers[chat_id] = task

        await log_and_respond(
            message, f"‚úÖ –¢–∞–π–º–µ—Ä –Ω–∞ {res_data[0]} –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω! –£–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!"
        )
        await log_and_respond(message, f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ {res_data[1]}")
        await state.set_state(TimerState.exam_in_progress)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {str(e)}")
        await log_and_respond(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def countdown_timer(chat_id: int, res: tuple[int, int, int, int, list], bot: Bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä —ç–∫–∑–∞–º–µ–Ω–∞"""
    exam_time, student_time, preparation_time, num_students, students = res
    student_time *= 60  # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—ã
    active_timers[chat_id] = True
    student_skip_event[chat_id] = asyncio.Event()

    if preparation_time > 0:
        await send_preparation_messages(chat_id, preparation_time, bot)

    await bot.send_message(chat_id, "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —ç–∫–∑–∞–º–µ–Ω!")
    await send_exam_messages(chat_id, students, student_time, bot)

    active_timers.pop(chat_id, None)
    student_skip_event.pop(chat_id, None)
    await bot.send_message(chat_id, "‚úÖ –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!")


async def send_preparation_messages(chat_id: int, preparation_time: int, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ö–æ–¥–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"""
    await bot.send_message(
        chat_id, f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É! –í—Ä–µ–º—è: {preparation_time} –º–∏–Ω—É—Ç."
    )
    await asyncio.sleep(preparation_time * 60)


async def send_exam_messages(
    chat_id: int, students: List[Student], student_time: int, bot: Bot
):
    """–ü—Ä–æ—Ü–µ—Å—Å —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    for student in students:
        if chat_id not in active_timers:
            return

        await bot.send_message(
            chat_id, f"üéì –í—Ä–µ–º—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {student.surname}. –ù–∞—á–∏–Ω–∞–µ–º!"
        )

        try:
            await asyncio.wait_for(
                student_skip_event[chat_id].wait(), timeout=student_time
            )
        except asyncio.TimeoutError:
            pass  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        finally:
            student_skip_event[chat_id].clear()

        await bot.send_message(chat_id, f"üöÄ –í—Ä–µ–º—è –¥–ª—è {student.surname} –≤—ã—à–ª–æ!")


@router.message(TimerState.exam_in_progress)
async def skip_current_student(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è —ç–∫–∑–∞–º–µ–Ω–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É"""
    chat_id = message.chat.id
    if chat_id in student_skip_event:
        student_skip_event[chat_id].set()
        await message.answer("‚è≠ –°—Ç—É–¥–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.")


@router.message(F.text == "/stop_exam")
async def command_stop_timer(message: Message, state: FSMContext):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
    chat_id = message.chat.id
    if chat_id in active_timers:
        try:
            del active_timers[chat_id]
            student_skip_event.pop(chat_id, None)
            await log_and_respond(message, "üõë –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await state.clear()
        except Exception as e:
            await log_and_respond(message, "üõë –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞")
    else:
        await log_and_respond(message, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")
