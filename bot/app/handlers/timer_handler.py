import asyncio
from typing import List

from aiogram import Bot, Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.app.logger.logger_file import logger
from bot.app.repositories.models import Student
from bot.app.services.Exam.timer import ExamTimerPreparations

active_timers = {}
router = Router()


class TimerState(StatesGroup):
    waiting_for_time = State()


def log_and_respond(message: Message, text: str):
    logger.info(f"Chat {message.chat.id}: {text}")
    return message.answer(text)


@router.message(F.text == "/start_exam")
async def command_start_timer(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    text = (
        "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:\n"
        "1. –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫–∑–∞–º–µ–Ω–∞.\n"
        "2. –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.\n"
        "–ü—Ä–∏–º–µ—Ä 1: 10 90 - –≥–¥–µ 10 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏ 90 –º–∏–Ω—É—Ç –Ω–∞ —ç–∫–∑–∞–º–µ–Ω.\n"
        "–ü—Ä–∏–º–µ—Ä 2: 0 5 - –≥–¥–µ 0 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏ 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞."
    )
    await log_and_respond(message, text)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–π–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 90'):")
    await state.set_state(TimerState.waiting_for_time)


@router.message(TimerState.waiting_for_time)
async def set_timer(message: Message, state: FSMContext, bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        args = message.text.split()
        if len(args) != 2 or not all(arg.isdigit() for arg in args):
            await message.answer("üö´ –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 90').")
            return

        arg, arg2 = map(int, args)
        res = ExamTimerPreparations(mode1=(arg, arg2))

        try:
            text, res_data = await res.resulted_timer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ resulted_timer: {str(e)}")
            await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        chat_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–π–º–µ—Ä
        if chat_id in active_timers:
            active_timers[chat_id].cancel()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        task = asyncio.create_task(countdown_timer(chat_id, res_data, bot))
        active_timers[chat_id] = task

        await log_and_respond(message, f"‚úÖ –¢–∞–π–º–µ—Ä –Ω–∞ {res_data[0]} –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω! –£–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {str(e)}")
        await log_and_respond(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def countdown_timer(chat_id: int, res: tuple[int, int, int, int, list], bot: Bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä —ç–∫–∑–∞–º–µ–Ω–∞"""
    exam_time, student_time, preparation_time, num_students, students = res
    student_time *= 60  # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—ã

    active_timers[chat_id] = True

    if preparation_time > 0:
        await send_preparation_messages(chat_id, preparation_time, bot)

    await bot.send_message(chat_id, "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —ç–∫–∑–∞–º–µ–Ω!")
    await send_exam_messages(chat_id, students, student_time, bot)

    active_timers.pop(chat_id, None)
    await bot.send_message(chat_id, "‚úÖ –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!")


async def send_preparation_messages(chat_id: int, preparation_time: int, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ö–æ–¥–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"""
    await bot.send_message(chat_id, f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É! –í—Ä–µ–º—è: {preparation_time} –º–∏–Ω—É—Ç.")
    await asyncio.sleep(preparation_time * 60)


async def send_exam_messages(chat_id: int, students: List[Student], student_time: int, bot: Bot):
    """–ü—Ä–æ—Ü–µ—Å—Å —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    for student in students:
        if chat_id not in active_timers:
            return
        await bot.send_message(chat_id, f"üéì –í—Ä–µ–º—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {student.surname}. –ù–∞—á–∏–Ω–∞–µ–º!")
        await asyncio.sleep(student_time)
        await bot.send_message(chat_id, f"üöÄ –í—Ä–µ–º—è –¥–ª—è {student.surname} –≤—ã—à–ª–æ!")


@router.message(F.text == "/stop_exam")
async def command_stop_timer(message: Message):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
    chat_id = message.chat.id
    if chat_id in active_timers:
        try:
            del active_timers[chat_id]
            await log_and_respond(message, "üõë –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        except Exception as e:
            await log_and_respond(message, "üõë –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞")
    else:
        await log_and_respond(message, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")
